#!/usr/bin/env python
import sys
import os
import getopt

def usage(code = 2, message=None):
    help = """Create a Django project from a template.

    --template
    template.json file to use

    --help -h
    Prints this message

    --no-prompt -s
    All prompts will be skipped and default values used.

    --no-git
    Does not create a git repo for the new project.
    """

    if message:
        print >> sys.stderr, message
    print "usage: haus-start [--template=template.json] [--no-prompt or -s] [--no-git] project_name"
    print "usage: haus-start [--help]"
    print "usage: haus-start [--version or -v]"
    if code == 0:
        print help
    sys.exit(code)

def confirm(prompt, resp=False):
    while True:
        ans = raw_input(prompt)
        if not ans:
            return resp
        if ans not in ['y', 'Y', 'n', 'N']:
            print 'please enter y or n.'
            continue
        if ans == 'y' or ans == 'Y':
            return True
        if ans == 'n' or ans == 'N':
            return False

def main(args):

    pos_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    sys.path.append(pos_dir)
    import haus_start

    no_prompt=False
    no_git = False
    template = None

    try:
        opts, args = getopt.getopt(args, "hsv", [ "template=", "help", "no-prompt", "no-git", "version"])
    except getopt.GetoptError, err:
        print str(err)
        usage()

    for o, a in opts:
        if o == "--template":
            relative_path = os.path.join(__file__, '../../haus_start/templates', a)
            if os.path.exists(a):
                template = a
            elif os.path.exists(relative_path):
                template = relative_path
            else:
                usage(message="invalid file %s" % a)
        elif o in ("-h", "--help"):
            usage(0)
        elif o in ("-v", "--version"):
            print haus_start.__version__
            sys.exit(0)
        elif o in ("-s", "--no-prompt"):
            no_prompt = True
        elif o in ("--no-git",):
            no_git = True
        else:
            assert False, "unhandled option"

    project_folder = None
    if not len(args) > 0:
        if not no_prompt:
            if not confirm("Install in current folder? [y/n]"):
                sys.exit()
    else:
        project_folder = args[0]

    haus_start.start_project(project_folder, template, no_prompt, no_git)
    sys.path.remove(pos_dir)

if __name__ == "__main__":
    main(sys.argv[1:])
